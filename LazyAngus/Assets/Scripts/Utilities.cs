// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.Linq;


public class Utilities
{
	public static float GetYAngle(Vector3 vector) {
		vector.y = 0;
		float angle = Vector3.Angle (Vector3.forward, vector);
		if (vector.x < 0) {
			return -angle;
		} else {
			return angle;
		}
	} 

	public static GameObject FindChildWithTag(GameObject gameObject, string tag) {
		for(int i = 0; i < gameObject.transform.childCount; i++){
			Transform child = gameObject.transform.GetChild(i);
			if(child.gameObject.tag == tag){
				return child.gameObject;
			}
		}
		return null;
	}

	public static T FindComponentInAncestor<T>(GameObject gameObject) {
		T component = gameObject.GetComponent<T> ();
		if (component != null) {
			return component;
		}
		Transform parent = gameObject.transform.parent;
		if (!parent || !parent.gameObject) {
			return default(T);
		}
		return FindComponentInAncestor<T> (parent.gameObject);
	}

	public static void ShuffleList<T>(ref List<T> list) {
		for (int i = 0; i < list.Count; i++) {
			T temp = list [i];
			int randomIndex = Random.Range (i, list.Count);
			list [i] = list [randomIndex];
			list [randomIndex] = temp;
		}
	}

	public static Color TrafficLightColorLerp (float fractionFinished) {
		fractionFinished = Mathf.Clamp (fractionFinished, 0f, 1f);
		if (fractionFinished < 0.5f) {
			return Color.Lerp (Color.green, Color.yellow, fractionFinished * 2f);
		} else {
			return Color.Lerp (Color.yellow, Color.red, fractionFinished * 2f - 1f);
		}
	}
}



